Index: gcc4/recipe/patches/gmp/fix-configure.p
===================================================================
--- /dev/null
+++ gcc4/recipe/patches/gmp/fix-configure.p
@@ -0,0 +1,47 @@
+From 564ca5fb5bcc99fbd17fb8af7d86cd71a777801d Mon Sep 17 00:00:00 2001
+From: Marc Glisse <marc.glisse@inria.fr>
+Date: Mon, 31 Mar 2014 22:20:18 +0200
+Subject: [PATCH] Make long long reliability tests tolerable for stricter
+ compilers.
+
+From 14837bacbbd80804a11fee2016f660d132bf8aec Mon Sep 17 00:00:00 2001
+From: Marc Glisse <marc.glisse@inria.fr>
+Date: Wed, 29 Jan 2025 22:38:02 +0100
+Subject: [PATCH] Complete function prototype in acinclude.m4 for C23
+ compatibility
+---
+ ChangeLog    |  1 +
+ acinclude.m4 | 10 ++++++----
+ 2 files changed, 7 insertions(+), 4 deletions(-)
+
+Index: acinclude.m4
+===================================================================
+--- acinclude.m4.orig
++++ acinclude.m4
+@@ -591,11 +591,12 @@ GMP_PROG_CC_WORKS_PART([$1], [long long
+ 
+ #if defined (__GNUC__) && ! defined (__cplusplus)
+ typedef unsigned long long t1;typedef t1*t2;
++void g(int,t1 const*,t1,t2,t1 const*,int){}
++void h(){}
+ static __inline__ t1 e(t2 rp,t2 up,int n,t1 v0)
+ {t1 c,x,r;int i;if(v0){c=1;for(i=1;i<n;i++){x=up[i];r=x+1;rp[i]=r;}}return c;}
+-f(){static const struct{t1 n;t1 src[9];t1 want[9];}d[]={{1,{0},{1}},};t1 got[9];int i;
++void f(){static const struct{t1 n;t1 src[9];t1 want[9];}d[]={{1,{0},{1}},};t1 got[9];int i;
+ for(i=0;i<1;i++){if(e(got,got,9,d[i].n)==0)h();g(i,d[i].src,d[i].n,got,d[i].want,9);if(d[i].n)h();}}
+-h(){}g(){}
+ #else
+ int dummy;
+ #endif
+@@ -607,8 +608,9 @@ GMP_PROG_CC_WORKS_PART([$1], [long long
+    1666 to get an ICE with -O1 -mpowerpc64.  */
+ 
+ #if defined (__GNUC__) && ! defined (__cplusplus)
+-f(int u){int i;long long x;x=u?~0:0;if(x)for(i=0;i<9;i++);x&=g();if(x)g();}
+-g(){}
++int g();
++void f(int u){int i;long long x;x=u?~0:0;if(x)for(i=0;i<9;i++);x&=g();if(x)g();}
++int g(){return 0;}
+ #else
+ int dummy;
+ #endif
Index: gcc4/recipe/scripts/gmp/reconf-gmp
===================================================================
--- /dev/null
+++ gcc4/recipe/scripts/gmp/reconf-gmp
@@ -0,0 +1,4 @@
+#!/bin/bash
+# Auto-generate 'gmp' as we've patched it.
+
+( autoconf )
