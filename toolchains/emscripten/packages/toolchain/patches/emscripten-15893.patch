From af4322618a2a6fd0474ff4d52e2e4f39b796c154 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Thu, 6 Jan 2022 14:55:48 +0900
Subject: [PATCH 1/9] import mutable globals used in Asyncify pass

---
 emcc.py        | 9 +++++++++
 emscripten.py  | 1 +
 src/library.js | 6 ++++++
 3 files changed, 16 insertions(+)

diff --git a/emcc.py b/emcc.py
index fa3076eb8e0..2e3c816e7ef 100755
--- a/emcc.py
+++ b/emcc.py
@@ -559,6 +559,8 @@ def get_binaryen_passes():
     passes += ['--fpcast-emu']
   if settings.ASYNCIFY:
     passes += ['--asyncify']
+    if settings.MAIN_MODULE or settings.SIDE_MODULE:
+      passes += ['--pass-arg=asyncify-side-module']
     if settings.ASSERTIONS:
       passes += ['--pass-arg=asyncify-asserts']
     if settings.ASYNCIFY_ADVISE:
@@ -1771,6 +1773,13 @@ def phase_linker_setup(options, state, newargs, user_settings):
         '__heap_base',
         '__stack_pointer',
     ]
+
+    if settings.ASYNCIFY:
+      settings.DEFAULT_LIBRARY_FUNCS_TO_INCLUDE += [
+        '__asyncify_state',
+        '__asyncify_data'
+      ]
+    
     # Unconditional dependency in library_dylink.js
     settings.REQUIRED_EXPORTS += ['setThrew']
 
diff --git a/emscripten.py b/emscripten.py
index b19c0f97eb9..beabb6fca3b 100644
--- a/emscripten.py
+++ b/emscripten.py
@@ -344,6 +344,7 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
 
   if settings.ASYNCIFY:
     exports += ['asyncify_start_unwind', 'asyncify_stop_unwind', 'asyncify_start_rewind', 'asyncify_stop_rewind']
+    metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
 
   report_missing_symbols(forwarded_json['libraryFunctions'])
 
diff --git a/src/library.js b/src/library.js
index b1947fc69d7..dcb54aae883 100644
--- a/src/library.js
+++ b/src/library.js
@@ -3619,6 +3619,12 @@ LibraryManager.library = {
   __c_longjmp: "new WebAssembly.Tag({'parameters': ['{{{ POINTER_TYPE }}}']})",
   __c_longjmp_import: true,
 #endif
+#if ASYNCIFY
+  __asyncify_state: "new WebAssembly.Global({'value': 'i32', 'mutable': true}, 0)",
+  __asyncify_state__import: true,
+  __asyncify_data: "new WebAssembly.Global({'value': 'i32', 'mutable': true}, 0)",
+  __asyncify_data__import: true,
+#endif
 #endif
 };
 

From aeb0ce56b8a778b75182d2b3791ffa63b2080f44 Mon Sep 17 00:00:00 2001
From: nokotan <kamenokonokotan@gmail.com>
Date: Sun, 23 Jan 2022 21:54:03 +0900
Subject: [PATCH 2/9] move globals metadata modification

---
 emscripten.py | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/emscripten.py b/emscripten.py
index beabb6fca3b..271213ad728 100644
--- a/emscripten.py
+++ b/emscripten.py
@@ -324,6 +324,9 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
     if settings.INITIAL_TABLE == -1:
       settings.INITIAL_TABLE = dylink_sec.table_size + 1
 
+    if settings.ASYNCIFY:
+      metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
+
   glue, forwarded_data = compile_settings()
   if DEBUG:
     logger.debug('  emscript: glue took %s seconds' % (time.time() - t))
@@ -344,7 +347,6 @@ def emscript(in_wasm, out_wasm, outfile_js, memfile):
 
   if settings.ASYNCIFY:
     exports += ['asyncify_start_unwind', 'asyncify_stop_unwind', 'asyncify_start_rewind', 'asyncify_stop_rewind']
-    metadata['globalImports'] += ['__asyncify_state', '__asyncify_data']
 
   report_missing_symbols(forwarded_json['libraryFunctions'])
 

From 1010d46660efb3322580ee6628412f5a78a7c6b8 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Tue, 25 Jan 2022 22:00:21 +0900
Subject: [PATCH 3/9] Remove redundant spaces

---
 emcc.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/emcc.py b/emcc.py
index 2e3c816e7ef..45b1eba4319 100755
--- a/emcc.py
+++ b/emcc.py
@@ -1779,7 +1779,7 @@ def phase_linker_setup(options, state, newargs, user_settings):
         '__asyncify_state',
         '__asyncify_data'
       ]
-    
+
     # Unconditional dependency in library_dylink.js
     settings.REQUIRED_EXPORTS += ['setThrew']
 

From fe54d139855728e6c52956c05b231b4ae19c4f67 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Tue, 25 Jan 2022 22:10:36 +0900
Subject: [PATCH 4/9] Add test_asyncify_side_module

---
 tests/test_core.py | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)

diff --git a/tests/test_core.py b/tests/test_core.py
index ca8ad60f9f8..f6033f83fe7 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -7870,6 +7870,34 @@ def test_asyncify_indirect_lists(self, args, should_pass):
       if should_pass:
         raise
 
+  @needs_dylink
+  @no_memory64('TODO: asyncify for wasm64')
+  def test_asyncify_side_module(self):
+    self.set_setting('ASYNCIFY')
+    self.emcc_args += ['-sASYNCIFY_IMPORTS=["_Z8my_sleepi"]']
+    self.dylink_test(r'''
+      #include <stdio.h>
+      #include "header.h"
+
+      int main() {
+        my_sleep(1);     
+        return 0;
+      }
+    ''', r'''
+      #include <emscripten.h>
+      #include <stdio.h>
+      #include "header.h"
+
+      void my_sleep(int milli_seconds) {
+        // put variable onto stack
+        volatile int value = 42;
+        printf("%d ", value);
+        emscripten_sleep(milli_seconds);
+        // variable on stack in side module function should be restored.
+        printf("%d\n", value);
+      }
+    ''', '42 42', header='void my_sleep(int);')
+
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')
   def test_emscripten_scan_registers(self):

From afba627a0c6a1666b8d20aa2cbb08657b6694692 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Wed, 26 Jan 2022 01:29:14 +0900
Subject: [PATCH 5/9] flake8, add EXIT_RUNTIME

---
 tests/test_core.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/tests/test_core.py b/tests/test_core.py
index f6033f83fe7..d7f5cead083 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -7874,13 +7874,14 @@ def test_asyncify_indirect_lists(self, args, should_pass):
   @no_memory64('TODO: asyncify for wasm64')
   def test_asyncify_side_module(self):
     self.set_setting('ASYNCIFY')
+    self.set_setting('EXIT_RUNTIME', 1)
     self.emcc_args += ['-sASYNCIFY_IMPORTS=["_Z8my_sleepi"]']
     self.dylink_test(r'''
       #include <stdio.h>
       #include "header.h"
 
       int main() {
-        my_sleep(1);     
+        my_sleep(1);
         return 0;
       }
     ''', r'''

From 1af80c0d84b794bb5fc807f788524066c06422a0 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 30 Jan 2022 02:39:01 +0900
Subject: [PATCH 6/9] add instrumentWasmExports

---
 src/library_dylink.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/library_dylink.js b/src/library_dylink.js
index 8ed16752912..9d1c69ec768 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -570,6 +570,9 @@ var LibraryDylink = {
         // add new entries to functionsInTableMap
         updateTableMap(tableBase, metadata.tableSize);
         moduleExports = relocateExports(instance.exports, memoryBase);
+#if ASYNCIFY
+        moduleExports = Asyncify.instrumentWasmExports(moduleExports);
+#endif
         if (!flags.allowUndefined) {
           reportUndefinedSymbols();
         }

From d5a90f3deec595fd6f0de0d16caf6183b20ad6c3 Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 30 Jan 2022 02:39:56 +0900
Subject: [PATCH 7/9] add searched symbols in getDataRewindFunc

---
 src/library_async.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/library_async.js b/src/library_async.js
index da09a1ae2d8..0ceb072dd37 100644
--- a/src/library_async.js
+++ b/src/library_async.js
@@ -205,6 +205,11 @@ mergeInto(LibraryManager.library, {
       var id = {{{ makeGetValue('ptr', C_STRUCTS.asyncify_data_s.rewind_id, 'i32') }}};
       var name = Asyncify.callStackIdToName[id];
       var func = Module['asm'][name];
+#if RELOCATABLE
+      if (!func) {
+        func = Module[asmjsMangle(name)];
+      }
+#endif
       return func;
     },
 

From 23f45459f660f307012c725449eec1240c389a4c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Christian=20K=C3=BCndig?= <christian@kuendig.info>
Date: Fri, 18 Feb 2022 18:15:53 +0100
Subject: [PATCH 8/9] Fixing dlsym for emscripten-core/emscripten#15893

---
 src/library_dylink.js | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/library_dylink.js b/src/library_dylink.js
index 9d1c69ec768..e2ed388a1fc 100644
--- a/src/library_dylink.js
+++ b/src/library_dylink.js
@@ -962,6 +962,12 @@ var LibraryDylink = {
 #if DYLINK_DEBUG
       err('dlsym: ' + symbol + ' getting table slot for: ' + result);
 #endif
+
+#if ASYNCIFY
+      if(symbol in GOT && GOT[symbol].value != 0) {
+        return GOT[symbol].value 
+      }
+#endif
       // Insert the function into the wasm table.  If its a direct wasm function
       // the second argument will not be needed.  If its a JS function we rely
       // on the `sig` attribute being set based on the `<func>__sig` specified

From de6021f93f6be8c76b5d546ab85b50de8dd63cae Mon Sep 17 00:00:00 2001
From: kamenokonokotan <kamenokonokotan@gmail.com>
Date: Sun, 6 Mar 2022 00:05:00 +0900
Subject: [PATCH 9/9] Add test case test_asyncify_dlfcn

---
 tests/test_core.py | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/tests/test_core.py b/tests/test_core.py
index d7f5cead083..e21072d143e 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -7899,6 +7899,39 @@ def test_asyncify_side_module(self):
       }
     ''', '42 42', header='void my_sleep(int);')
 
+  @needs_dylink
+  @no_memory64('TODO: asyncify for wasm64')
+  def test_asyncify_dlfcn(self):
+    self.set_setting('ASYNCIFY')
+    self.set_setting('EXIT_RUNTIME', 1)
+    self.emcc_args += ['-sASYNCIFY_IGNORE_INDIRECT=0']
+    self.dylink_test(r'''
+      #include <iostream>
+      #include <dlfcn.h>
+
+      typedef int (*func_t)();
+
+      int main(int argc, char **argv)
+      {
+        void *_dlHandle = dlopen("liblib.so", RTLD_NOW | RTLD_LOCAL);
+        func_t my_func = (func_t)dlsym(_dlHandle, "side_module_run");
+        printf("%d\n", my_func());
+        return 0;
+      }
+    ''', r'''
+      #include <iostream>
+      #include <emscripten/emscripten.h>
+
+      extern "C"
+      {
+        int side_module_run()
+        {
+          emscripten_sleep(1000);
+          return 42;
+        }
+      }
+    ''', '42', need_reverse=False)
+
   @no_asan('asyncify stack operations confuse asan')
   @no_memory64('TODO: asyncify for wasm64')
   def test_emscripten_scan_registers(self):
