Bring various asm bugfixes from FLAC 1.3.x, mainly targeted at older CPUs,
which is what some users of theses Win95 releases could possibly use

From https://github.com/xiph/flac/commits/1.3.4/src/libFLAC/ia32:

* commit 08bfd42: fix labels (missing colons)
* commit 3cea079: Fix a couple of NASM warnings
* commit 8e4a45a: Match calls and returns
* commit c2747be: More 'mov cl' -> 'mov ecx' fixes
* commit 2c15052: CPUID detecion improvements
* commit c12bfa0: Fix cpuid detecton on old Cyrix CPUs

--- a/src/libFLAC/ia32/cpu_asm.nasm
+++ b/src/libFLAC/ia32/cpu_asm.nasm
@@ -46,7 +46,6 @@
 ;
 
 cident FLAC__cpu_have_cpuid_asm_ia32
-	push	ebx
 	pushfd
 	pop	eax
 	mov	edx, eax
@@ -55,14 +54,11 @@
 	popfd
 	pushfd
 	pop	eax
-	cmp	eax, edx
-	jz	.no_cpuid
-	mov	eax, 1
-	jmp	.end
-.no_cpuid:
-	xor	eax, eax
-.end:
-	pop	ebx
+	xor	eax, edx
+	and	eax, 0x00200000
+	shr	eax, 0x15
+	push	edx
+	popfd
 	ret
 
 ; **********************************************************************
@@ -78,6 +74,11 @@
 	call	FLAC__cpu_have_cpuid_asm_ia32
 	test	eax, eax
 	jz	.no_cpuid
+	mov	eax, 0
+	cpuid
+	cmp	eax, 1
+	jb	.no_cpuid
+	xor	ecx, ecx
 	mov	eax, 1
 	cpuid
 	mov	ebx, [esp + 8]
@@ -85,13 +86,13 @@
 	mov	ebx, [esp + 12]
 	mov	[ebx], ecx
 	jmp	.end
-.no_cpuid
+.no_cpuid:
 	xor	eax, eax
 	mov	ebx, [esp + 8]
 	mov	[ebx], eax
 	mov	ebx, [esp + 12]
 	mov	[ebx], eax
-.end
+.end:
 	pop	ebx
 	ret
 
@@ -108,13 +109,13 @@
 	cpuid
 	mov	eax, edx
 	jmp	.end
-.no_cpuid
+.no_cpuid:
 	xor	eax, eax
-.end
+.end:
 	pop	ebx
 	ret
 
-end
+; end
 
 %ifdef OBJ_FORMAT_elf
        section .note.GNU-stack noalloc
--- a/src/libFLAC/ia32/lpc_asm.nasm
+++ b/src/libFLAC/ia32/lpc_asm.nasm
@@ -113,9 +113,8 @@
 	lea	edx, [eax + eax*2]
 	neg	edx
 	lea	edx, [eax + edx*4 + .jumper1_0 - .get_eip1]
-	call	.get_eip1
+	call	.mov_eip_to_ebx
 .get_eip1:
-	pop	ebx
 	add	edx, ebx
 	inc	edx				; compensate for the shorter opcode on the last iteration
 	inc	edx				; compensate for the shorter opcode on the last iteration
@@ -126,6 +125,10 @@
 .loop1_start:
 	jmp	edx
 
+.mov_eip_to_ebx:
+ 	mov ebx, [esp]
+ 	ret
+
 	fld	st0				; ST = d d
 	fmul	dword [esi + (32*4)]		; ST = d*data[sample+32] d		WATCHOUT: not a byte displacement here!
 	fadd	dword [edi + (32*4)]		; ST = autoc[32]+d*data[sample+32] d	WATCHOUT: not a byte displacement here!
@@ -283,9 +286,8 @@
 	lea	edx, [eax + eax*2]
 	neg	edx
 	lea	edx, [eax + edx*4 + .jumper2_0 - .get_eip2]
-	call	.get_eip2
+	call	.mov_eip_to_ebx
 .get_eip2:
-	pop	ebx
 	add	edx, ebx
 	inc	edx				; compensate for the shorter opcode on the last iteration
 	inc	edx				; compensate for the shorter opcode on the last iteration
@@ -777,7 +779,7 @@
 	mov	ecx, [esp + 28]
 	mov	edx, [ecx]			; edx = qlp_coeff[0]
 	mov	eax, [esi - 4]			; eax = data[-1]
-	mov	cl, [esp + 36]			; cl = lp_quantization
+	mov	ecx, [esp + 36]			; cl = lp_quantization
 	ALIGN	16
 .i_1_loop_i:
 	imul	eax, edx
@@ -815,7 +817,7 @@
 	inc	ecx
 	jnz	short .i_32more_loop_j
 
-	mov	cl, [esp + 36]
+	mov	ecx, [esp + 36]
 	sar	ebp, cl
 	neg	ebp
 	add	ebp, [esi]
@@ -828,13 +830,16 @@
 
 	jmp	.end
 
+.mov_eip_to_eax:
+ 	mov eax, [esp]
+ 	ret
+
 .i_32:
 	sub	edi, esi
 	neg	eax
 	lea	edx, [eax + eax * 8 + .jumper_0 - .get_eip0]
-	call	.get_eip0
+	call	.mov_eip_to_eax
 .get_eip0:
-	pop	eax
 	add	edx, eax
 	inc	edx
 	mov	eax, [esp + 28]			; eax = qlp_coeff[]
@@ -939,7 +944,7 @@
 	add	ebp, ecx
 .jumper_0:
 
-	mov	cl, [esp + 36]
+	mov	ecx, [esp + 36]
 	sar	ebp, cl
 	neg	ebp
 	add	ebp, [esi]
@@ -1184,7 +1189,7 @@
 	mov	ecx, [esp + 28]
 	mov	edx, [ecx]
 	mov	eax, [edi - 4]
-	mov	cl, [esp + 36]
+	mov	ecx, [esp + 36]
 	ALIGN	16
 .x87_1_loop_i:
 	imul	eax, edx
@@ -1220,7 +1225,7 @@
 	inc	ecx
 	jnz	short .x87_32more_loop_j
 
-	mov	cl, [esp + 36]
+	mov	ecx, [esp + 36]
 	sar	ebp, cl
 	add	ebp, [esi]
 	mov	[edi], ebp
@@ -1232,13 +1237,16 @@
 
 	jmp	.end
 
+.mov_eip_to_eax:
+ 	mov eax, [esp]
+ 	ret
+
 .x87_32:
 	sub	esi, edi
 	neg	eax
 	lea	edx, [eax + eax * 8 + .jumper_0 - .get_eip0]
-	call	.get_eip0
+	call	.mov_eip_to_eax
 .get_eip0:
-	pop	eax
 	add	edx, eax
 	inc	edx				; compensate for the shorter opcode on the last iteration
 	mov	eax, [esp + 28]			; eax = qlp_coeff[]
@@ -1343,7 +1351,7 @@
 	add	ebp, ecx			; sum += qlp_coeff[ 0] * data[i- 1]
 .jumper_0:
 
-	mov	cl, [esp + 36]
+	mov	ecx, [esp + 36]
 	sar	ebp, cl				; ebp = (sum >> lp_quantization)
 	add	ebp, [esi + edi]		; ebp = residual[i] + (sum >> lp_quantization)
 	mov	[edi], ebp			; data[i] = residual[i] + (sum >> lp_quantization)
@@ -1504,7 +1512,7 @@
 	pop	ebp
 	ret
 
-end
+; end
 
 %ifdef OBJ_FORMAT_elf
        section .note.GNU-stack noalloc
--- a/src/libFLAC/ia32/bitreader_asm.nasm
+++ b/src/libFLAC/ia32/bitreader_asm.nasm
@@ -561,7 +561,7 @@
 	pop	ebp
 	ret
 
-end
+; end
 
 %ifdef OBJ_FORMAT_elf
 	section .note.GNU-stack noalloc
--- a/src/libFLAC/ia32/fixed_asm.nasm
+++ b/src/libFLAC/ia32/fixed_asm.nasm
@@ -305,7 +305,7 @@
 	pop	ebp
 	ret
 
-end
+; end
 
 %ifdef OBJ_FORMAT_elf
        section .note.GNU-stack noalloc
--- a/src/libFLAC/ia32/stream_encoder_asm.nasm
+++ b/src/libFLAC/ia32/stream_encoder_asm.nasm
@@ -152,7 +152,7 @@
 	pop	ebp
 	ret
 
-end
+; end
 
 %ifdef OBJ_FORMAT_elf
 	section .note.GNU-stack noalloc